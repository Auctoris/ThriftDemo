/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LoggerService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace LoggerCpp {


LoggerException::~LoggerException() throw() {
}


void LoggerException::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void LoggerException::__set_error_description(const std::string& val) {
  this->error_description = val;
}

uint32_t LoggerException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_description);
          this->__isset.error_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoggerException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoggerException");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoggerException &a, LoggerException &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_description, b.error_description);
  swap(a.__isset, b.__isset);
}

LoggerException::LoggerException(const LoggerException& other0) : TException() {
  error_code = other0.error_code;
  error_description = other0.error_description;
  __isset = other0.__isset;
}
LoggerException& LoggerException::operator=(const LoggerException& other1) {
  error_code = other1.error_code;
  error_description = other1.error_description;
  __isset = other1.__isset;
  return *this;
}
void LoggerException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoggerException(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_description=" << to_string(error_description);
  out << ")";
}

const char* LoggerException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: LoggerException";
  }
}

} // namespace
