/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Logger_H
#define Logger_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "LoggerService_types.h"

namespace LoggerCpp {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class LoggerIf {
 public:
  virtual ~LoggerIf() {}
  virtual void timestamp(const std::string& filename) = 0;
  virtual void get_last_log_entry(std::string& _return, const std::string& filename) = 0;
  virtual void write_log(const std::string& filename, const std::string& message) = 0;
  virtual int32_t get_log_size(const std::string& filename) = 0;
};

class LoggerIfFactory {
 public:
  typedef LoggerIf Handler;

  virtual ~LoggerIfFactory() {}

  virtual LoggerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LoggerIf* /* handler */) = 0;
};

class LoggerIfSingletonFactory : virtual public LoggerIfFactory {
 public:
  LoggerIfSingletonFactory(const boost::shared_ptr<LoggerIf>& iface) : iface_(iface) {}
  virtual ~LoggerIfSingletonFactory() {}

  virtual LoggerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LoggerIf* /* handler */) {}

 protected:
  boost::shared_ptr<LoggerIf> iface_;
};

class LoggerNull : virtual public LoggerIf {
 public:
  virtual ~LoggerNull() {}
  void timestamp(const std::string& /* filename */) {
    return;
  }
  void get_last_log_entry(std::string& /* _return */, const std::string& /* filename */) {
    return;
  }
  void write_log(const std::string& /* filename */, const std::string& /* message */) {
    return;
  }
  int32_t get_log_size(const std::string& /* filename */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _Logger_timestamp_args__isset {
  _Logger_timestamp_args__isset() : filename(false) {}
  bool filename :1;
} _Logger_timestamp_args__isset;

class Logger_timestamp_args {
 public:

  Logger_timestamp_args(const Logger_timestamp_args&);
  Logger_timestamp_args& operator=(const Logger_timestamp_args&);
  Logger_timestamp_args() : filename() {
  }

  virtual ~Logger_timestamp_args() throw();
  std::string filename;

  _Logger_timestamp_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const Logger_timestamp_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Logger_timestamp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_timestamp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_timestamp_pargs {
 public:


  virtual ~Logger_timestamp_pargs() throw();
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_get_last_log_entry_args__isset {
  _Logger_get_last_log_entry_args__isset() : filename(false) {}
  bool filename :1;
} _Logger_get_last_log_entry_args__isset;

class Logger_get_last_log_entry_args {
 public:

  Logger_get_last_log_entry_args(const Logger_get_last_log_entry_args&);
  Logger_get_last_log_entry_args& operator=(const Logger_get_last_log_entry_args&);
  Logger_get_last_log_entry_args() : filename() {
  }

  virtual ~Logger_get_last_log_entry_args() throw();
  std::string filename;

  _Logger_get_last_log_entry_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const Logger_get_last_log_entry_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Logger_get_last_log_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_get_last_log_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_get_last_log_entry_pargs {
 public:


  virtual ~Logger_get_last_log_entry_pargs() throw();
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_get_last_log_entry_result__isset {
  _Logger_get_last_log_entry_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Logger_get_last_log_entry_result__isset;

class Logger_get_last_log_entry_result {
 public:

  Logger_get_last_log_entry_result(const Logger_get_last_log_entry_result&);
  Logger_get_last_log_entry_result& operator=(const Logger_get_last_log_entry_result&);
  Logger_get_last_log_entry_result() : success() {
  }

  virtual ~Logger_get_last_log_entry_result() throw();
  std::string success;
  LoggerException error;

  _Logger_get_last_log_entry_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_error(const LoggerException& val);

  bool operator == (const Logger_get_last_log_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Logger_get_last_log_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_get_last_log_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_get_last_log_entry_presult__isset {
  _Logger_get_last_log_entry_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Logger_get_last_log_entry_presult__isset;

class Logger_get_last_log_entry_presult {
 public:


  virtual ~Logger_get_last_log_entry_presult() throw();
  std::string* success;
  LoggerException error;

  _Logger_get_last_log_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Logger_write_log_args__isset {
  _Logger_write_log_args__isset() : filename(false), message(false) {}
  bool filename :1;
  bool message :1;
} _Logger_write_log_args__isset;

class Logger_write_log_args {
 public:

  Logger_write_log_args(const Logger_write_log_args&);
  Logger_write_log_args& operator=(const Logger_write_log_args&);
  Logger_write_log_args() : filename(), message() {
  }

  virtual ~Logger_write_log_args() throw();
  std::string filename;
  std::string message;

  _Logger_write_log_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const Logger_write_log_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Logger_write_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_write_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_write_log_pargs {
 public:


  virtual ~Logger_write_log_pargs() throw();
  const std::string* filename;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_write_log_result__isset {
  _Logger_write_log_result__isset() : error(false) {}
  bool error :1;
} _Logger_write_log_result__isset;

class Logger_write_log_result {
 public:

  Logger_write_log_result(const Logger_write_log_result&);
  Logger_write_log_result& operator=(const Logger_write_log_result&);
  Logger_write_log_result() {
  }

  virtual ~Logger_write_log_result() throw();
  LoggerException error;

  _Logger_write_log_result__isset __isset;

  void __set_error(const LoggerException& val);

  bool operator == (const Logger_write_log_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Logger_write_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_write_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_write_log_presult__isset {
  _Logger_write_log_presult__isset() : error(false) {}
  bool error :1;
} _Logger_write_log_presult__isset;

class Logger_write_log_presult {
 public:


  virtual ~Logger_write_log_presult() throw();
  LoggerException error;

  _Logger_write_log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Logger_get_log_size_args__isset {
  _Logger_get_log_size_args__isset() : filename(false) {}
  bool filename :1;
} _Logger_get_log_size_args__isset;

class Logger_get_log_size_args {
 public:

  Logger_get_log_size_args(const Logger_get_log_size_args&);
  Logger_get_log_size_args& operator=(const Logger_get_log_size_args&);
  Logger_get_log_size_args() : filename() {
  }

  virtual ~Logger_get_log_size_args() throw();
  std::string filename;

  _Logger_get_log_size_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const Logger_get_log_size_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Logger_get_log_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_get_log_size_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Logger_get_log_size_pargs {
 public:


  virtual ~Logger_get_log_size_pargs() throw();
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_get_log_size_result__isset {
  _Logger_get_log_size_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Logger_get_log_size_result__isset;

class Logger_get_log_size_result {
 public:

  Logger_get_log_size_result(const Logger_get_log_size_result&);
  Logger_get_log_size_result& operator=(const Logger_get_log_size_result&);
  Logger_get_log_size_result() : success(0) {
  }

  virtual ~Logger_get_log_size_result() throw();
  int32_t success;
  LoggerException error;

  _Logger_get_log_size_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error(const LoggerException& val);

  bool operator == (const Logger_get_log_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const Logger_get_log_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Logger_get_log_size_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Logger_get_log_size_presult__isset {
  _Logger_get_log_size_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _Logger_get_log_size_presult__isset;

class Logger_get_log_size_presult {
 public:


  virtual ~Logger_get_log_size_presult() throw();
  int32_t* success;
  LoggerException error;

  _Logger_get_log_size_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LoggerClient : virtual public LoggerIf {
 public:
  LoggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoggerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void timestamp(const std::string& filename);
  void send_timestamp(const std::string& filename);
  void get_last_log_entry(std::string& _return, const std::string& filename);
  void send_get_last_log_entry(const std::string& filename);
  void recv_get_last_log_entry(std::string& _return);
  void write_log(const std::string& filename, const std::string& message);
  void send_write_log(const std::string& filename, const std::string& message);
  void recv_write_log();
  int32_t get_log_size(const std::string& filename);
  void send_get_log_size(const std::string& filename);
  int32_t recv_get_log_size();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LoggerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LoggerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LoggerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_timestamp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_last_log_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_log_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LoggerProcessor(boost::shared_ptr<LoggerIf> iface) :
    iface_(iface) {
    processMap_["timestamp"] = &LoggerProcessor::process_timestamp;
    processMap_["get_last_log_entry"] = &LoggerProcessor::process_get_last_log_entry;
    processMap_["write_log"] = &LoggerProcessor::process_write_log;
    processMap_["get_log_size"] = &LoggerProcessor::process_get_log_size;
  }

  virtual ~LoggerProcessor() {}
};

class LoggerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LoggerProcessorFactory(const ::boost::shared_ptr< LoggerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LoggerIfFactory > handlerFactory_;
};

class LoggerMultiface : virtual public LoggerIf {
 public:
  LoggerMultiface(std::vector<boost::shared_ptr<LoggerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LoggerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LoggerIf> > ifaces_;
  LoggerMultiface() {}
  void add(boost::shared_ptr<LoggerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void timestamp(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timestamp(filename);
    }
    ifaces_[i]->timestamp(filename);
  }

  void get_last_log_entry(std::string& _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_last_log_entry(_return, filename);
    }
    ifaces_[i]->get_last_log_entry(_return, filename);
    return;
  }

  void write_log(const std::string& filename, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_log(filename, message);
    }
    ifaces_[i]->write_log(filename, message);
  }

  int32_t get_log_size(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_log_size(filename);
    }
    return ifaces_[i]->get_log_size(filename);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class LoggerConcurrentClient : virtual public LoggerIf {
 public:
  LoggerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  LoggerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void timestamp(const std::string& filename);
  void send_timestamp(const std::string& filename);
  void get_last_log_entry(std::string& _return, const std::string& filename);
  int32_t send_get_last_log_entry(const std::string& filename);
  void recv_get_last_log_entry(std::string& _return, const int32_t seqid);
  void write_log(const std::string& filename, const std::string& message);
  int32_t send_write_log(const std::string& filename, const std::string& message);
  void recv_write_log(const int32_t seqid);
  int32_t get_log_size(const std::string& filename);
  int32_t send_get_log_size(const std::string& filename);
  int32_t recv_get_log_size(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
